// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/pkg/errors"
	"io"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/internal/errno"
	"tiktok/internal/utils"
	"tiktok/kitex_gen/user"

	"github.com/cloudwego/hertz/pkg/app"
	api "tiktok/cmd/api/biz/model/api"
)

// Register .
// @router tiktok/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}

	err = rpc.Register(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}

	pack.RespSuccess(c)
}

// Login .
// @router tiktok/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	resp := new(api.LoginResponse)

	loginResp, err := rpc.Login(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
		Otp:      req.Otp,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	//pack
	resp.User = pack.BuildUser(loginResp.User)
	resp.AccessToken = loginResp.AccessToken
	resp.RefreshToken = loginResp.RefreshToken
	pack.RespData(c, resp)
}

// GetInfo .
// @router tiktok/user/info [GET]
func GetInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}

	resp := new(api.InfoResponse)
	u, err := rpc.GetUserInfo(ctx, &user.InfoRequest{Uid: req.ID})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	//pack
	resp.User = pack.BuildUser(u)
	pack.RespData(c, resp)
}

// AvatarUpload .
// @router tiktok/user/avatar/upload [PUT]
func AvatarUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	data, err := c.FormFile("data")
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	file, err := data.Open()
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	file.Close()
	resp := new(api.AvatarUploadResponse)
	userInfo, err := pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	fileData, _ := io.ReadAll(file)
	userResp, err := rpc.UploadAvatar(ctx, &user.AvatarUploadRequest{
		Data: fileData,
		Uid:  userInfo.ID,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	//获取用户的信息仅仅是为了调试写的，可删除
	resp.User = pack.BuildUser(userResp)
	pack.RespData(c, resp)
}

// GetMFAqrcode .
// @router tiktok/auth/mfa/qrcode [GET]
func GetMFAqrcode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetMFAqrcodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//jwt拦截
	userInfo, err := pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	resp := new(api.GetMFAqrcodeResponse)
	resp.Qrcode, resp.Secret, err = rpc.GetMFAqrcode(ctx, &user.GetMFAqrcodeRequest{
		Uid:      userInfo.ID,
		Username: userInfo.UserName,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// MFABind .
// @router tiktok/auth/mfa/bind [POST]
func MFABind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MFABindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//jwt拦截
	userInfo, err := pack.GetUserInfo(ctx)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	err = rpc.MFABind(ctx, &user.MFABindRequest{
		Code:   req.Code,
		Secret: req.Secret,
		Uid:    userInfo.ID,
	})
	if err != nil {
		utils.LogrusObj.Error(err)
		err := errors.Cause(err)
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}
