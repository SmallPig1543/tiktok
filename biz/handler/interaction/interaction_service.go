// Code generated by hertz generator.

package interaction

import (
	"context"
	"tiktok/pkg/e"
	"tiktok/service"
	"tiktok/types"

	"github.com/cloudwego/hertz/pkg/app"
	interaction "tiktok/biz/model/interaction"
)

// Like .
// @router tiktok/like/action [POST]
func Like(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	l := service.GetInteractionService()
	code, err := l.Like(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespSuccess(c)
}

// LikeList .
// @router tiktok/like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}

	resp := new(interaction.LikeListResponse)
	l := service.GetInteractionService()
	resp, count, code, err := l.LikeList(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespList(c, resp, count)
}

// CommentPublish .
// @router tiktok/comment/publish [POST]
func CommentPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CommentPublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	l := service.GetInteractionService()
	resp := new(interaction.CommentPublishResponse)
	resp, code, err := l.Comment(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespSuccessWithData(c, resp)
}

// CommentList .
// @router tiktok/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	l := service.GetInteractionService()
	resp := new(interaction.CommentListResponse)
	resp, count, code, err := l.CommentList(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespList(c, resp, count)
}

// DeleteComment .
// @router tiktok/comment/delete [DELETE]
func DeleteComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DeleteCommentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	l := service.GetInteractionService()
	code, err := l.DeleteComment(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespSuccess(c)
}
