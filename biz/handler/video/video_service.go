// Code generated by hertz generator.

package video

import (
	"context"
	"tiktok/pkg/e"
	"tiktok/service"
	"tiktok/types"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	video "tiktok/biz/model/video"
)

// Feed .
// @router tiktok/video/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}

	resp := new(video.FeedResponse)
	l := service.GetVideoService()
	resp, code, err, total := l.Feed(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespList(c, resp, total)
}

// Publish .
// @router tiktok/video/publish [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	videoData, err := c.FormFile("videodata")
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}
	coverData, err := c.FormFile("coverdata")
	resp := new(video.PublishResponse)
	l := service.GetVideoService()
	resp, code, err := l.Publish(ctx, &req, videoData, coverData)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespSuccessWithData(c, resp)
}

// PublishList .
// @router tiktok/video/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		types.RespError(c, e.InvalidParams)
		return
	}

	resp := new(video.PublishListResponse)
	l := service.GetVideoService()
	resp, code, err, total := l.PublishList(ctx, &req)
	if err != nil {
		types.RespError(c, code)
		return
	}
	types.RespList(c, resp, total)
}

// PopularList .
// @router tiktok/video/popular [GET]
func PopularList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PopularListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.PopularListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Search .
// @router tiktok/video/search [POST]
func Search(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.SearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.SearchResponse)

	c.JSON(consts.StatusOK, resp)
}
